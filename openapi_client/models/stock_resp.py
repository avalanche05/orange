# coding: utf-8

"""
    –ì–µ–π–º—Ç–æ–Ω DatsOrange

     ![image](./DatsOrange.png)  **–¶–µ–ª—å –≥–µ–π–º—Ç–æ–Ω–∞:** –û—Å—Ç–∞—Ç—å—Å—è —Å —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –±–∏—Ä–∂–µ.     –ö–æ–º–∞–Ω–¥–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è:   1. –ë–∏—Ä–∂–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.   2. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.    3. –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤ –∞–ø–µ–ª—å—Å–∏–Ω–∞—Ö.   4. –ù–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Ä—ã–Ω–∫–µ.   5. API.       # –ë–∏—Ä–∂–∞    –ë–∏—Ä–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (UTC+03:00):        - 15.09.2023 —Å 17:00 –¥–æ 22:00;   - 16.09.2023 —Å 10:00 –¥–æ 22:00.       –í–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã –∏–≥—Ä–æ–∫–æ–≤, –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è.      –ù–∞ –±–∏—Ä–∂–µ –µ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ —Å –∞–∫—Ü–∏—è–º–∏, —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏. –ù–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏, –∫–∞–∫ –∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ, –≤–ª–∏—è—é—Ç —Ä–∞–∑–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.     # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã    –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç:      - –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∂–µ–ª–∞–µ–º–æ–π —Ü–µ–Ω—ã;   - –ø—Ä–æ–¥–∞—Ç—å/–∫—É–ø–∏—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ, –∫–æ—Ç–æ—Ä–∞—è —Å–µ–π—á–∞—Å –µ—Å—Ç—å –≤ –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –±–∏—Ä–∂–µ.  –õ–∏–º–∏—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç 1 –º–∏–Ω—É—Ç—É, –∏ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∂–µ–ª–∞—é—â–∏—Ö –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å –ø–æ —ç—Ç–æ–π —Ü–µ–Ω–µ, —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –æ–Ω–∏ –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è.    # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å      –ù–∞—à–∞ –≤–∞–ª—é—Ç–∞ - —ç—Ç–æ –ê–ø–µ–ª—å—Å–∏–Ω—ã üçäüçäüçä.    –£ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –∞–ø–µ–ª—å—Å–∏–Ω–∞—Ö = 10000. –ö–æ–º–∞–Ω–¥–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≤–µ–ª–∏—á–∏—Ç—å —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∞–ø–µ–ª—å—Å–∏–Ω—ã –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç.       –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã —É –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ 15000 –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤, –∑–Ω–∞—á–∏—Ç –≤–∞—à –∏—Ç–æ–≥ = 5000 (15000 - 10000).  # –ù–æ–≤–æ—Å—Ç–∏ –ù–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤–ª–∏—è—é—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–µ –≤ –º–∏—Ä–µ —Å–æ–±—ã—Ç–∏—è. –ù–æ–≤–æ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ —Ç–∞–∫–∂–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω—ã –≤–ª–∏—è–Ω–∏—é.     –ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π:   - -15% \"–õ–µ—Å–Ω–æ–π –ø–æ–∂–∞—Ä —É–Ω–∏—á—Ç–æ–∂–∏–ª –ø–æ—Å–µ–≤–Ω—ã–µ, –∏ —É—Ä–æ–∂–∞–π –≤ —ç—Ç–æ–º –≥–æ–¥—É –±—É–¥–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ\".   - +20% \"–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –ø—Ä–∏–Ω—è–ª–æ –∑–∞–∫–æ–Ω –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, –±–∏–∑–Ω–µ—Å –º–æ–∂–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫—Ä–∏–ø—Ç–µ.\"    –ì–¥–µ:    - ‚Äú+/-‚Äù - –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ,    -  ‚Äú15%‚Äù - –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏.    –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏.     –ù–æ–≤–æ—Å—Ç–∏ —Ç–∞–∫–∂–µ –º–æ–≥—É—Ç –æ–ø–æ–≤–µ—â–∞—Ç—å –æ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏.    # –ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç    –ü–æ–±–µ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Ä—ã–Ω–∫–∞ (–Ω–µ –º–µ–Ω–µ–µ 100 –∑–∞—è–≤–æ–∫), —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –±–∏—Ä–∂–∏ 16–≥–æ —á–∏—Å–ª–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤ –∑–∞ –≤—ã—á–µ—Ç–æ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç –±–∏—Ä–∂–∏.    –ó–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å –Ω–∞ –Ω–∞—à–µ–º –Ω–æ–≤–æ—Å—Ç–Ω–æ–º —Ä–µ—Å—É—Ä—Å–µ –ø–æ —Å—Å—ã–ª–∫–µ - https://datsteam.dev/datsorange/scene.      –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–∞–π—Ç–µ - —ç—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤ –±—É–¥–µ—Ç –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –û–¥–Ω–∞–∫–æ –≤ —Å–ª—É—á–∞–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–¥–∞–∂–∏ –∏—Ç–æ–≥ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Å–ø—Ä–æ—Å–∞, –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤, –ø–æ—ç—Ç–æ–º—É –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞ —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç –≤—ã—Ö–æ–¥ –≤ –∞–ø–µ–ª—å—Å–∏–Ω—ã üçäüçäüçä.            # API         –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äòtoken‚Äô —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –≤–∞–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.        # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class StockResp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'ticker': 'str',
        'bids': 'list[BidStat]'
    }

    attribute_map = {
        'id': 'id',
        'ticker': 'ticker',
        'bids': 'bids'
    }

    def __init__(self, id=None, ticker=None, bids=None, local_vars_configuration=None):  # noqa: E501
        """StockResp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._ticker = None
        self._bids = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if ticker is not None:
            self.ticker = ticker
        if bids is not None:
            self.bids = bids

    @property
    def id(self):
        """Gets the id of this StockResp.  # noqa: E501

        id  # noqa: E501

        :return: The id of this StockResp.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StockResp.

        id  # noqa: E501

        :param id: The id of this StockResp.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def ticker(self):
        """Gets the ticker of this StockResp.  # noqa: E501

        –¢–∏–∫–µ—Ä  # noqa: E501

        :return: The ticker of this StockResp.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this StockResp.

        –¢–∏–∫–µ—Ä  # noqa: E501

        :param ticker: The ticker of this StockResp.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def bids(self):
        """Gets the bids of this StockResp.  # noqa: E501

        –ó–∞—è–≤–∫–∏  # noqa: E501

        :return: The bids of this StockResp.  # noqa: E501
        :rtype: list[BidStat]
        """
        return self._bids

    @bids.setter
    def bids(self, bids):
        """Sets the bids of this StockResp.

        –ó–∞—è–≤–∫–∏  # noqa: E501

        :param bids: The bids of this StockResp.  # noqa: E501
        :type: list[BidStat]
        """

        self._bids = bids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StockResp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StockResp):
            return True

        return self.to_dict() != other.to_dict()
