# coding: utf-8

"""
    –ì–µ–π–º—Ç–æ–Ω DatsOrange

     ![image](./DatsOrange.png)  **–¶–µ–ª—å –≥–µ–π–º—Ç–æ–Ω–∞:** –û—Å—Ç–∞—Ç—å—Å—è —Å —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –±–∏—Ä–∂–µ.     –ö–æ–º–∞–Ω–¥–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è:   1. –ë–∏—Ä–∂–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.   2. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.    3. –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤ –∞–ø–µ–ª—å—Å–∏–Ω–∞—Ö.   4. –ù–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Ä—ã–Ω–∫–µ.   5. API.       # –ë–∏—Ä–∂–∞    –ë–∏—Ä–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (UTC+03:00):        - 15.09.2023 —Å 17:00 –¥–æ 22:00;   - 16.09.2023 —Å 10:00 –¥–æ 22:00.       –í–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã –∏–≥—Ä–æ–∫–æ–≤, –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è.      –ù–∞ –±–∏—Ä–∂–µ –µ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ —Å –∞–∫—Ü–∏—è–º–∏, —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏. –ù–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏, –∫–∞–∫ –∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ, –≤–ª–∏—è—é—Ç —Ä–∞–∑–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.     # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã    –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç:      - –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∂–µ–ª–∞–µ–º–æ–π —Ü–µ–Ω—ã;   - –ø—Ä–æ–¥–∞—Ç—å/–∫—É–ø–∏—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ, –∫–æ—Ç–æ—Ä–∞—è —Å–µ–π—á–∞—Å –µ—Å—Ç—å –≤ –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –±–∏—Ä–∂–µ.  –õ–∏–º–∏—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç 1 –º–∏–Ω—É—Ç—É, –∏ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∂–µ–ª–∞—é—â–∏—Ö –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å –ø–æ —ç—Ç–æ–π —Ü–µ–Ω–µ, —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –æ–Ω–∏ –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è.    # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å      –ù–∞—à–∞ –≤–∞–ª—é—Ç–∞ - —ç—Ç–æ –ê–ø–µ–ª—å—Å–∏–Ω—ã üçäüçäüçä.    –£ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –∞–ø–µ–ª—å—Å–∏–Ω–∞—Ö = 10000. –ö–æ–º–∞–Ω–¥–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≤–µ–ª–∏—á–∏—Ç—å —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∞–ø–µ–ª—å—Å–∏–Ω—ã –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç.       –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã —É –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ 15000 –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤, –∑–Ω–∞—á–∏—Ç –≤–∞—à –∏—Ç–æ–≥ = 5000 (15000 - 10000).  # –ù–æ–≤–æ—Å—Ç–∏ –ù–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤–ª–∏—è—é—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–µ –≤ –º–∏—Ä–µ —Å–æ–±—ã—Ç–∏—è. –ù–æ–≤–æ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ —Ç–∞–∫–∂–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω—ã –≤–ª–∏—è–Ω–∏—é.     –ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π:   - -15% \"–õ–µ—Å–Ω–æ–π –ø–æ–∂–∞—Ä —É–Ω–∏—á—Ç–æ–∂–∏–ª –ø–æ—Å–µ–≤–Ω—ã–µ, –∏ —É—Ä–æ–∂–∞–π –≤ —ç—Ç–æ–º –≥–æ–¥—É –±—É–¥–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ\".   - +20% \"–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –ø—Ä–∏–Ω—è–ª–æ –∑–∞–∫–æ–Ω –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, –±–∏–∑–Ω–µ—Å –º–æ–∂–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫—Ä–∏–ø—Ç–µ.\"    –ì–¥–µ:    - ‚Äú+/-‚Äù - –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ,    -  ‚Äú15%‚Äù - –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏.    –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏.     –ù–æ–≤–æ—Å—Ç–∏ —Ç–∞–∫–∂–µ –º–æ–≥—É—Ç –æ–ø–æ–≤–µ—â–∞—Ç—å –æ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏.    # –ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç    –ü–æ–±–µ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Ä—ã–Ω–∫–∞ (–Ω–µ –º–µ–Ω–µ–µ 100 –∑–∞—è–≤–æ–∫), —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –±–∏—Ä–∂–∏ 16–≥–æ —á–∏—Å–ª–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤ –∑–∞ –≤—ã—á–µ—Ç–æ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç –±–∏—Ä–∂–∏.    –ó–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å –Ω–∞ –Ω–∞—à–µ–º –Ω–æ–≤–æ—Å—Ç–Ω–æ–º —Ä–µ—Å—É—Ä—Å–µ –ø–æ —Å—Å—ã–ª–∫–µ - https://datsteam.dev/datsorange/scene.      –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–∞–π—Ç–µ - —ç—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤ –±—É–¥–µ—Ç –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –û–¥–Ω–∞–∫–æ –≤ —Å–ª—É—á–∞–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–¥–∞–∂–∏ –∏—Ç–æ–≥ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Å–ø—Ä–æ—Å–∞, –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤, –ø–æ—ç—Ç–æ–º—É –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞ —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç –≤—ã—Ö–æ–¥ –≤ –∞–ø–µ–ª—å—Å–∏–Ω—ã üçäüçäüçä.            # API         –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äòtoken‚Äô —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –≤–∞–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.        # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import io
import json
import logging
import re
import ssl

import certifi
# python 2 and python 3 compatibility library
import six
from six.moves.urllib.parse import urlencode
import urllib3

from openapi_client.exceptions import ApiException, ApiValueError


logger = logging.getLogger(__name__)


class RESTResponse(io.IOBase):

    def __init__(self, resp):
        self.urllib3_response = resp
        self.status = resp.status
        self.reason = resp.reason
        self.data = resp.data

    def getheaders(self):
        """Returns a dictionary of the response headers."""
        return self.urllib3_response.getheaders()

    def getheader(self, name, default=None):
        """Returns a given response header."""
        return self.urllib3_response.getheader(name, default)


class RESTClientObject(object):

    def __init__(self, configuration, pools_size=4, maxsize=None):
        # urllib3.PoolManager will pass all kw parameters to connectionpool
        # https://github.com/shazow/urllib3/blob/f9409436f83aeb79fbaf090181cd81b784f1b8ce/urllib3/poolmanager.py#L75  # noqa: E501
        # https://github.com/shazow/urllib3/blob/f9409436f83aeb79fbaf090181cd81b784f1b8ce/urllib3/connectionpool.py#L680  # noqa: E501
        # maxsize is the number of requests to host that are allowed in parallel  # noqa: E501
        # Custom SSL certificates and client certificates: http://urllib3.readthedocs.io/en/latest/advanced-usage.html  # noqa: E501

        # cert_reqs
        if configuration.verify_ssl:
            cert_reqs = ssl.CERT_REQUIRED
        else:
            cert_reqs = ssl.CERT_NONE

        # ca_certs
        if configuration.ssl_ca_cert:
            ca_certs = configuration.ssl_ca_cert
        else:
            # if not set certificate file, use Mozilla's root certificates.
            ca_certs = certifi.where()

        addition_pool_args = {}
        if configuration.assert_hostname is not None:
            addition_pool_args['assert_hostname'] = configuration.assert_hostname  # noqa: E501

        if configuration.retries is not None:
            addition_pool_args['retries'] = configuration.retries

        if maxsize is None:
            if configuration.connection_pool_maxsize is not None:
                maxsize = configuration.connection_pool_maxsize
            else:
                maxsize = 4

        # https pool manager
        if configuration.proxy:
            self.pool_manager = urllib3.ProxyManager(
                num_pools=pools_size,
                maxsize=maxsize,
                cert_reqs=cert_reqs,
                ca_certs=ca_certs,
                cert_file=configuration.cert_file,
                key_file=configuration.key_file,
                proxy_url=configuration.proxy,
                proxy_headers=configuration.proxy_headers,
                **addition_pool_args
            )
        else:
            self.pool_manager = urllib3.PoolManager(
                num_pools=pools_size,
                maxsize=maxsize,
                cert_reqs=cert_reqs,
                ca_certs=ca_certs,
                cert_file=configuration.cert_file,
                key_file=configuration.key_file,
                **addition_pool_args
            )

    def request(self, method, url, query_params=None, headers=None,
                body=None, post_params=None, _preload_content=True,
                _request_timeout=None):
        """Perform requests.

        :param method: http request method
        :param url: http request url
        :param query_params: query parameters in the url
        :param headers: http request headers
        :param body: request json body, for `application/json`
        :param post_params: request post parameters,
                            `application/x-www-form-urlencoded`
                            and `multipart/form-data`
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        """
        method = method.upper()
        assert method in ['GET', 'HEAD', 'DELETE', 'POST', 'PUT',
                          'PATCH', 'OPTIONS']

        if post_params and body:
            raise ApiValueError(
                "body parameter cannot be used with post_params parameter."
            )

        post_params = post_params or {}
        headers = headers or {}

        timeout = None
        if _request_timeout:
            if isinstance(_request_timeout, (int, ) if six.PY3 else (int, long)):  # noqa: E501,F821
                timeout = urllib3.Timeout(total=_request_timeout)
            elif (isinstance(_request_timeout, tuple) and
                  len(_request_timeout) == 2):
                timeout = urllib3.Timeout(
                    connect=_request_timeout[0], read=_request_timeout[1])

        if 'Content-Type' not in headers:
            headers['Content-Type'] = 'application/json'

        try:
            # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`
            if method in ['POST', 'PUT', 'PATCH', 'OPTIONS', 'DELETE']:
                if query_params:
                    url += '?' + urlencode(query_params)
                if re.search('json', headers['Content-Type'], re.IGNORECASE):
                    request_body = None
                    if body is not None:
                        request_body = json.dumps(body)
                    r = self.pool_manager.request(
                        method, url,
                        body=request_body,
                        preload_content=_preload_content,
                        timeout=timeout,
                        headers=headers)
                elif headers['Content-Type'] == 'application/x-www-form-urlencoded':  # noqa: E501
                    r = self.pool_manager.request(
                        method, url,
                        fields=post_params,
                        encode_multipart=False,
                        preload_content=_preload_content,
                        timeout=timeout,
                        headers=headers)
                elif headers['Content-Type'] == 'multipart/form-data':
                    # must del headers['Content-Type'], or the correct
                    # Content-Type which generated by urllib3 will be
                    # overwritten.
                    del headers['Content-Type']
                    r = self.pool_manager.request(
                        method, url,
                        fields=post_params,
                        encode_multipart=True,
                        preload_content=_preload_content,
                        timeout=timeout,
                        headers=headers)
                # Pass a `string` parameter directly in the body to support
                # other content types than Json when `body` argument is
                # provided in serialized form
                elif isinstance(body, str) or isinstance(body, bytes):
                    request_body = body
                    r = self.pool_manager.request(
                        method, url,
                        body=request_body,
                        preload_content=_preload_content,
                        timeout=timeout,
                        headers=headers)
                else:
                    # Cannot generate the request from given parameters
                    msg = """Cannot prepare a request message for provided
                             arguments. Please check that your arguments match
                             declared content type."""
                    raise ApiException(status=0, reason=msg)
            # For `GET`, `HEAD`
            else:
                r = self.pool_manager.request(method, url,
                                              fields=query_params,
                                              preload_content=_preload_content,
                                              timeout=timeout,
                                              headers=headers)
        except urllib3.exceptions.SSLError as e:
            msg = "{0}\n{1}".format(type(e).__name__, str(e))
            raise ApiException(status=0, reason=msg)

        if _preload_content:
            r = RESTResponse(r)

            # log response body
            logger.debug("response body: %s", r.data)

        if not 200 <= r.status <= 299:
            raise ApiException(http_resp=r)

        return r

    def GET(self, url, headers=None, query_params=None, _preload_content=True,
            _request_timeout=None):
        return self.request("GET", url,
                            headers=headers,
                            _preload_content=_preload_content,
                            _request_timeout=_request_timeout,
                            query_params=query_params)

    def HEAD(self, url, headers=None, query_params=None, _preload_content=True,
             _request_timeout=None):
        return self.request("HEAD", url,
                            headers=headers,
                            _preload_content=_preload_content,
                            _request_timeout=_request_timeout,
                            query_params=query_params)

    def OPTIONS(self, url, headers=None, query_params=None, post_params=None,
                body=None, _preload_content=True, _request_timeout=None):
        return self.request("OPTIONS", url,
                            headers=headers,
                            query_params=query_params,
                            post_params=post_params,
                            _preload_content=_preload_content,
                            _request_timeout=_request_timeout,
                            body=body)

    def DELETE(self, url, headers=None, query_params=None, body=None,
               _preload_content=True, _request_timeout=None):
        return self.request("DELETE", url,
                            headers=headers,
                            query_params=query_params,
                            _preload_content=_preload_content,
                            _request_timeout=_request_timeout,
                            body=body)

    def POST(self, url, headers=None, query_params=None, post_params=None,
             body=None, _preload_content=True, _request_timeout=None):
        return self.request("POST", url,
                            headers=headers,
                            query_params=query_params,
                            post_params=post_params,
                            _preload_content=_preload_content,
                            _request_timeout=_request_timeout,
                            body=body)

    def PUT(self, url, headers=None, query_params=None, post_params=None,
            body=None, _preload_content=True, _request_timeout=None):
        return self.request("PUT", url,
                            headers=headers,
                            query_params=query_params,
                            post_params=post_params,
                            _preload_content=_preload_content,
                            _request_timeout=_request_timeout,
                            body=body)

    def PATCH(self, url, headers=None, query_params=None, post_params=None,
              body=None, _preload_content=True, _request_timeout=None):
        return self.request("PATCH", url,
                            headers=headers,
                            query_params=query_params,
                            post_params=post_params,
                            _preload_content=_preload_content,
                            _request_timeout=_request_timeout,
                            body=body)
